{"version":3,"sources":["../../../src/tile-layer/tileset-2d.js"],"names":["Tile2DHeader","getTileIndices","tileToBoundingBox","TILE_STATE_UNKNOWN","TILE_STATE_VISIBLE","TILE_STATE_PLACEHOLDER","TILE_STATE_HIDDEN","TILE_STATE_SELECTED","STRATEGY_NEVER","STRATEGY_REPLACE","STRATEGY_DEFAULT","DEFAULT_CACHE_SCALE","Tileset2D","constructor","opts","_getTileData","getTileData","onTileError","onTileLoad","tile","maxCacheByteSize","_cacheByteSize","byteLength","_resizeCache","_cache","Map","_tiles","_dirty","_viewport","_selectedTiles","_frameNumber","setOptions","tiles","selectedTiles","isLoaded","every","Object","assign","Number","isFinite","maxZoom","_maxZoom","Math","floor","minZoom","_minZoom","ceil","update","viewport","zRange","tileIndices","map","index","_getTile","_rebuildTree","changed","updateTileStates","tileSize","getTileMetadata","x","y","z","bbox","getParentIndex","tileIndex","_updateTileStates","values","isVisible","Boolean","state","parent","children","length","_getNearestAncestor","push","refinementStrategy","getPlaceholderInAncestors","needsPlaceholder","getPlaceholderInChildren","maxCacheSize","Infinity","overflown","size","tileId","delete","Array","from","sort","t1","t2","create","get","loadData","set","t","max","child"],"mappings":"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","sourcesContent":["import Tile2DHeader from './tile-2d-header';\nimport {getTileIndices, tileToBoundingBox} from './utils';\n\nconst TILE_STATE_UNKNOWN = 0;\nconst TILE_STATE_VISIBLE = 1;\n/*\n   show cached parent tile if children are loading\n   +-----------+       +-----+            +-----+-----+\n   |           |       |     |            |     |     |\n   |           |       |     |            |     |     |\n   |           |  -->  +-----+-----+  ->  +-----+-----+\n   |           |             |     |      |     |     |\n   |           |             |     |      |     |     |\n   +-----------+             +-----+      +-----+-----+\n\n   show cached children tiles when parent is loading\n   +-------+----       +------------\n   |       |           |\n   |       |           |\n   |       |           |\n   +-------+----  -->  |\n   |       |           |\n */\nconst TILE_STATE_PLACEHOLDER = 3;\nconst TILE_STATE_HIDDEN = 4;\n// tiles that should be displayed in the current viewport\nconst TILE_STATE_SELECTED = 5;\n\nexport const STRATEGY_NEVER = 'never';\nexport const STRATEGY_REPLACE = 'no-overlap';\nexport const STRATEGY_DEFAULT = 'best-available';\n\nconst DEFAULT_CACHE_SCALE = 5;\n\n/**\n * Manages loading and purging of tiles data. This class caches recently visited tiles\n * and only create new tiles if they are present.\n */\n\nexport default class Tileset2D {\n  /**\n   * Takes in a function that returns tile data, a cache size, and a max and a min zoom level.\n   * Cache size defaults to 5 * number of tiles in the current viewport\n   */\n  constructor(opts) {\n    this.opts = opts;\n    this._getTileData = opts.getTileData;\n\n    this.onTileError = opts.onTileError;\n    this.onTileLoad = tile => {\n      opts.onTileLoad(tile);\n      if (this.opts.maxCacheByteSize) {\n        this._cacheByteSize += tile.byteLength;\n        this._resizeCache();\n      }\n    };\n\n    // Maps tile id in string {z}-{x}-{y} to a Tile object\n    this._cache = new Map();\n    this._tiles = [];\n    this._dirty = false;\n    this._cacheByteSize = 0;\n\n    // Cache the last processed viewport\n    this._viewport = null;\n    this._selectedTiles = null;\n    this._frameNumber = 0;\n\n    this.setOptions(opts);\n  }\n\n  /* Public API */\n  get tiles() {\n    return this._tiles;\n  }\n\n  get selectedTiles() {\n    return this._selectedTiles;\n  }\n\n  get isLoaded() {\n    return this._selectedTiles.every(tile => tile.isLoaded);\n  }\n\n  setOptions(opts) {\n    Object.assign(this.opts, opts);\n    if (Number.isFinite(opts.maxZoom)) {\n      this._maxZoom = Math.floor(opts.maxZoom);\n    }\n    if (Number.isFinite(opts.minZoom)) {\n      this._minZoom = Math.ceil(opts.minZoom);\n    }\n  }\n\n  /**\n   * Update the cache with the given viewport and triggers callback onUpdate.\n   * @param {*} viewport\n   * @param {*} onUpdate\n   */\n  update(viewport, {zRange} = {}) {\n    if (viewport !== this._viewport) {\n      this._viewport = viewport;\n      const tileIndices = this.getTileIndices({\n        viewport,\n        maxZoom: this._maxZoom,\n        minZoom: this._minZoom,\n        zRange\n      });\n      this._selectedTiles = tileIndices.map(index => this._getTile(index, true));\n\n      if (this._dirty) {\n        // Some new tiles are added\n        this._rebuildTree();\n      }\n    }\n\n    // Update tile states\n    const changed = this.updateTileStates();\n\n    if (this._dirty) {\n      // cache size is either the user defined maxSize or 5 * number of current tiles in the viewport.\n      this._resizeCache();\n    }\n\n    if (changed) {\n      this._frameNumber++;\n    }\n    return this._frameNumber;\n  }\n\n  /* Public interface for subclassing */\n\n  // Returns array of {x, y, z}\n  getTileIndices({viewport, maxZoom, minZoom, zRange}) {\n    return getTileIndices(viewport, maxZoom, minZoom, zRange, this.opts.tileSize);\n  }\n\n  // Add custom metadata to tiles\n  getTileMetadata({x, y, z}) {\n    return {\n      bbox: tileToBoundingBox(this._viewport, x, y, z, this.opts.tileSize)\n    };\n  }\n\n  // Returns {x, y, z} of the parent tile\n  getParentIndex(tileIndex) {\n    // Perf: mutate the input object to avoid GC\n    tileIndex.x = Math.floor(tileIndex.x / 2);\n    tileIndex.y = Math.floor(tileIndex.y / 2);\n    tileIndex.z -= 1;\n    return tileIndex;\n  }\n\n  // Returns true if any tile's visibility changed\n  updateTileStates() {\n    this._updateTileStates(this.selectedTiles);\n\n    let changed = false;\n    for (const tile of this._cache.values()) {\n      const isVisible = Boolean(tile.state & TILE_STATE_VISIBLE);\n      if (tile.isVisible !== isVisible) {\n        changed = true;\n        tile.isVisible = isVisible;\n      }\n    }\n\n    return changed;\n  }\n\n  /* Private methods */\n\n  // This needs to be called every time some tiles have been added/removed from cache\n  _rebuildTree() {\n    const {_cache} = this;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.parent = null;\n      tile.children.length = 0;\n    }\n\n    // Rebuild tree\n    for (const tile of _cache.values()) {\n      const parent = this._getNearestAncestor(tile.x, tile.y, tile.z);\n      tile.parent = parent;\n      if (parent) {\n        parent.children.push(tile);\n      }\n    }\n  }\n\n  // A selected tile is always visible.\n  // Never show two overlapping tiles.\n  // If a selected tile is loading, try showing a cached ancester with the closest z\n  // If a selected tile is loading, and no ancester is shown - try showing cached\n  // descendants with the closest z\n  _updateTileStates(selectedTiles) {\n    const {_cache} = this;\n    const refinementStrategy = this.opts.refinementStrategy || STRATEGY_DEFAULT;\n\n    // Reset states\n    for (const tile of _cache.values()) {\n      tile.state = TILE_STATE_UNKNOWN;\n    }\n\n    // For all the selected && pending tiles:\n    // - pick the closest ancestor as placeholder\n    // - if no ancestor is visible, pick the closest children as placeholder\n    for (const tile of selectedTiles) {\n      tile.state = TILE_STATE_SELECTED;\n    }\n\n    if (refinementStrategy === STRATEGY_NEVER) {\n      return;\n    }\n    for (const tile of selectedTiles) {\n      getPlaceholderInAncestors(tile, refinementStrategy);\n    }\n    for (const tile of selectedTiles) {\n      if (needsPlaceholder(tile)) {\n        getPlaceholderInChildren(tile);\n      }\n    }\n  }\n\n  /**\n   * Clear tiles that are not visible when the cache is full\n   */\n  /* eslint-disable complexity */\n  _resizeCache() {\n    const {_cache, opts} = this;\n\n    const maxCacheSize =\n      opts.maxCacheSize ||\n      (opts.maxCacheByteSize ? Infinity : DEFAULT_CACHE_SCALE * this.selectedTiles.length);\n    const maxCacheByteSize = opts.maxCacheByteSize || Infinity;\n\n    const overflown = _cache.size > maxCacheSize || this._cacheByteSize > maxCacheByteSize;\n\n    if (overflown) {\n      for (const [tileId, tile] of _cache) {\n        if (!tile.isVisible) {\n          // delete tile\n          this._cacheByteSize -= opts.maxCacheByteSize ? tile.byteLength : 0;\n          _cache.delete(tileId);\n        }\n        if (_cache.size <= maxCacheSize && this._cacheByteSize <= maxCacheByteSize) {\n          break;\n        }\n      }\n      this._rebuildTree();\n      this._dirty = true;\n    }\n    if (this._dirty) {\n      this._tiles = Array.from(this._cache.values())\n        // sort by zoom level so that smaller tiles are displayed on top\n        .sort((t1, t2) => t1.z - t2.z);\n\n      this._dirty = false;\n    }\n  }\n  /* eslint-enable complexity */\n\n  _getTile({x, y, z}, create) {\n    const tileId = `${x},${y},${z}`;\n    let tile = this._cache.get(tileId);\n\n    if (!tile && create) {\n      tile = new Tile2DHeader({\n        x,\n        y,\n        z,\n        onTileLoad: this.onTileLoad,\n        onTileError: this.onTileError\n      });\n      Object.assign(tile, this.getTileMetadata(tile));\n      tile.loadData(this._getTileData);\n      this._cache.set(tileId, tile);\n      this._dirty = true;\n    }\n    return tile;\n  }\n\n  _getNearestAncestor(x, y, z) {\n    const {_minZoom = 0} = this;\n    let index = {x, y, z};\n\n    while (index.z > _minZoom) {\n      index = this.getParentIndex(index);\n      const parent = this._getTile(index);\n      if (parent) {\n        return parent;\n      }\n    }\n    return null;\n  }\n}\n\n// A selected tile needs placeholder from its children if\n// - it is not loaded\n// - none of its ancestors is visible and loaded\nfunction needsPlaceholder(tile) {\n  let t = tile;\n  while (t) {\n    if (t.state & (TILE_STATE_VISIBLE === 0)) {\n      return true;\n    }\n    if (t.isLoaded) {\n      return false;\n    }\n    t = t.parent;\n  }\n  return true;\n}\n\nfunction getPlaceholderInAncestors(tile, refinementStrategy) {\n  let parent;\n  let state = TILE_STATE_PLACEHOLDER;\n  while ((parent = tile.parent)) {\n    if (tile.isLoaded) {\n      // If a tile is loaded, mark all its ancestors as hidden\n      state = TILE_STATE_HIDDEN;\n      if (refinementStrategy === STRATEGY_DEFAULT) {\n        return;\n      }\n    }\n    parent.state = Math.max(parent.state, state);\n    tile = parent;\n  }\n}\n\n// Recursively set children as placeholder\nfunction getPlaceholderInChildren(tile) {\n  for (const child of tile.children) {\n    child.state = Math.max(child.state, TILE_STATE_PLACEHOLDER);\n    if (!child.isLoaded) {\n      getPlaceholderInChildren(child);\n    }\n  }\n}\n"],"file":"tileset-2d.js"}