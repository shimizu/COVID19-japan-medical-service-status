{"version":3,"sources":["../../../src/tile-layer/tile-layer.js"],"names":["defaultProps","data","dataComparator","urlType","equals","renderSubLayers","type","value","props","GeoJsonLayer","compare","getTileData","optional","onViewportLoad","onTileLoad","tile","onTileError","err","console","error","tileSize","maxZoom","minZoom","maxCacheSize","maxCacheByteSize","refinementStrategy","STRATEGY_DEFAULT","zRange","TileLayer","state","tiles","isLoaded","changeFlags","somethingChanged","oldProps","context","tileset","createTileCache","dataChanged","updateTriggersChanged","all","Tileset2D","bind","_onTileLoad","_onTileError","setState","propsChanged","setOptions","forEach","layers","viewportChanged","_updateTileset","frameNumber","update","viewport","loadingStateChanged","tilesetChanged","selectedTiles","map","layer","getCurrentLayer","fetch","url","info","sourceLayer","visible","isVisible","Object","assign","id","x","y","z","_offset","Boolean","clone","every","CompositeLayer","layerName"],"mappings":"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","sourcesContent":["import {CompositeLayer, _flatten as flatten} from '@deck.gl/core';\nimport {GeoJsonLayer} from '@deck.gl/layers';\n\nimport Tileset2D, {STRATEGY_DEFAULT} from './tileset-2d';\nimport {urlType, getURLFromTemplate} from './utils';\n\nconst defaultProps = {\n  data: [],\n  dataComparator: urlType.equals,\n  renderSubLayers: {type: 'function', value: props => new GeoJsonLayer(props), compare: false},\n  getTileData: {type: 'function', optional: true, value: null, compare: false},\n  // TODO - change to onViewportLoad to align with Tile3DLayer\n  onViewportLoad: {type: 'function', optional: true, value: null, compare: false},\n  onTileLoad: {type: 'function', value: tile => {}, compare: false},\n  // eslint-disable-next-line\n  onTileError: {type: 'function', value: err => console.error(err), compare: false},\n  tileSize: 512,\n  maxZoom: null,\n  minZoom: 0,\n  maxCacheSize: null,\n  maxCacheByteSize: null,\n  refinementStrategy: STRATEGY_DEFAULT,\n  zRange: null\n};\n\nexport default class TileLayer extends CompositeLayer {\n  initializeState() {\n    this.state = {\n      tiles: [],\n      isLoaded: false\n    };\n  }\n\n  get isLoaded() {\n    const {tileset} = this.state;\n    return tileset.selectedTiles.every(\n      tile => tile.layers && tile.layers.every(layer => layer.isLoaded)\n    );\n  }\n\n  shouldUpdateState({changeFlags}) {\n    return changeFlags.somethingChanged;\n  }\n\n  updateState({props, oldProps, context, changeFlags}) {\n    let {tileset} = this.state;\n    const createTileCache =\n      !tileset ||\n      changeFlags.dataChanged ||\n      (changeFlags.updateTriggersChanged &&\n        (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getTileData));\n\n    if (createTileCache) {\n      const {\n        maxZoom,\n        minZoom,\n        tileSize,\n        maxCacheSize,\n        maxCacheByteSize,\n        refinementStrategy\n      } = props;\n      tileset = new Tileset2D({\n        getTileData: this.getTileData.bind(this),\n        maxCacheSize,\n        maxCacheByteSize,\n        maxZoom,\n        minZoom,\n        tileSize,\n        refinementStrategy,\n        onTileLoad: this._onTileLoad.bind(this),\n        onTileError: this._onTileError.bind(this)\n      });\n      this.setState({tileset});\n    } else if (changeFlags.propsChanged) {\n      tileset.setOptions(props);\n      // if any props changed, delete the cached layers\n      this.state.tileset.tiles.forEach(tile => {\n        tile.layers = null;\n      });\n    }\n\n    if (createTileCache || changeFlags.viewportChanged) {\n      this._updateTileset();\n    }\n  }\n\n  _updateTileset() {\n    const {tileset} = this.state;\n    const {onViewportLoad, zRange} = this.props;\n    const frameNumber = tileset.update(this.context.viewport, {zRange});\n    const {isLoaded} = tileset;\n\n    const loadingStateChanged = this.state.isLoaded !== isLoaded;\n    const tilesetChanged = this.state.frameNumber !== frameNumber;\n\n    if (isLoaded && onViewportLoad && (loadingStateChanged || tilesetChanged)) {\n      onViewportLoad(tileset.selectedTiles.map(tile => tile.data));\n    }\n\n    if (tilesetChanged) {\n      // Save the tileset frame number - trigger a rerender\n      this.setState({frameNumber});\n    }\n    // Save the loaded state - should not trigger a rerender\n    this.state.isLoaded = isLoaded;\n  }\n\n  _onTileLoad(tile) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileLoad(tile);\n    layer._updateTileset();\n  }\n\n  _onTileError(error) {\n    const layer = this.getCurrentLayer();\n    layer.props.onTileError(error);\n    // errorred tiles should not block rendering, are considered \"loaded\" with empty data\n    layer._updateTileset();\n  }\n\n  // Methods for subclass to override\n\n  getTileData(tile) {\n    const {getTileData, fetch, data} = this.props;\n\n    tile.url = getURLFromTemplate(data, tile);\n\n    if (getTileData) {\n      return getTileData(tile);\n    }\n    if (tile.url) {\n      return fetch(tile.url, {layer: this});\n    }\n    return null;\n  }\n\n  renderSubLayers(props) {\n    return this.props.renderSubLayers(props);\n  }\n\n  getPickingInfo({info, sourceLayer}) {\n    info.sourceLayer = sourceLayer;\n    info.tile = sourceLayer.props.tile;\n    return info;\n  }\n\n  renderLayers() {\n    const {visible} = this.props;\n    return this.state.tileset.tiles.map(tile => {\n      // For a tile to be visible:\n      // - parent layer must be visible\n      // - tile must be visible in the current viewport\n      const isVisible = visible && tile.isVisible;\n      // cache the rendered layer in the tile\n      if (!tile.layers) {\n        const layers = this.renderSubLayers(\n          Object.assign({}, this.props, {\n            id: `${this.id}-${tile.x}-${tile.y}-${tile.z}`,\n            data: tile.data,\n            visible: isVisible,\n            _offset: 0,\n            tile\n          })\n        );\n        tile.layers = flatten(layers, Boolean);\n      } else if (tile.layers[0] && tile.layers[0].props.visible !== isVisible) {\n        tile.layers = tile.layers.map(layer => layer.clone({visible: isVisible}));\n      }\n      return tile.layers;\n    });\n  }\n}\n\nTileLayer.layerName = 'TileLayer';\nTileLayer.defaultProps = defaultProps;\n"],"file":"tile-layer.js"}