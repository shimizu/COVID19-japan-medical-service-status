{"ast":null,"code":"import{ScatterplotLayer,HexagonLayer}from\"deck.gl\";var convertStats={normal:\"通常\",restriction:\"制限\",stop:\"停止\",nobeds:\"設置なし\",unanswered:\"未回答\"};var scatterColor={\"通常\":[23,190,187],\"制限\":[255,165,0],\"停止\":[214,34,70],\"設置なし\":[192,192,192],\"未回答\":[137,137,137]};var colorRange=[[1,152,189],[73,227,206],[216,254,181],[254,237,177],[254,173,84],[209,55,78]];export default(function(props){var data=props.data,layerType=props.layerType,hospitalState=props.hospitalState,onHover=props.onHover,onClick=props.onClick;if(!data)return;var statefilter=Object.keys(hospitalState).filter(function(key){return hospitalState[key];}).map(function(key){return convertStats[key];});var plotdata=data.filter(function(d){return statefilter.some(function(v){return d[\"医療区分回答\"]===v;});});var scatter=new ScatterplotLayer({id:\"scatterplot-layer\",data:plotdata,pickable:true,opacity:0.5,stroked:true,filled:true,radiusScale:1,radiusMinPixels:6,lineWidthMinPixels:1,getPosition:function getPosition(d){return[d[\"経度\"],d[\"緯度\"]];},getRadius:0,getFillColor:function getFillColor(d){return scatterColor[d[\"医療区分回答\"]];},getLineColor:function getLineColor(d){return scatterColor[d[\"医療区分回答\"]];},onClick:onClick,onHover:onHover});var hex=new HexagonLayer({id:\"hexagon-layer\",data:plotdata,colorRange:colorRange,opacity:0.8,radius:10000,pickable:true,extruded:true,elevationScale:60,elevationRange:[0,3000],getPosition:function getPosition(d){return[d[\"経度\"],d[\"緯度\"]];},getColorValue:function getColorValue(d){var alllength=d.length;var count=0;for(var i=0;i<d.length;i++){if(d[i][\"医療区分回答\"]===\"停止\"||d[i][\"医療区分回答\"]===\"制限\")count++;}var percent=~~(count/alllength*100);return percent;},onClick:onClick,onHover:onHover});var ramify={\"point\":scatter,\"hex\":hex};var layers=[ramify[layerType]];return layers;});","map":{"version":3,"sources":["/Users/idg08/Desktop/works/COVID19-japan-medical-service-status/src/components/Layers.js"],"names":["ScatterplotLayer","HexagonLayer","convertStats","normal","restriction","stop","nobeds","unanswered","scatterColor","colorRange","props","data","layerType","hospitalState","onHover","onClick","statefilter","Object","keys","filter","key","map","plotdata","d","some","v","scatter","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","lineWidthMinPixels","getPosition","getRadius","getFillColor","getLineColor","hex","radius","extruded","elevationScale","elevationRange","getColorValue","alllength","length","count","i","percent","ramify","layers"],"mappings":"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","sourcesContent":["import { ScatterplotLayer, HexagonLayer } from \"deck.gl\";\n\n\nconst convertStats = {\n    normal:\"通常\",\n    restriction:\"制限\",\n    stop :\"停止\",\n    nobeds :\"設置なし\",\n    unanswered :\"未回答\",\n}\n\nconst scatterColor = {\n    \"通常\":[23, 190, 187],\n    \"制限\":[255, 165, 0],\n    \"停止\":[214, 34, 70],\n    \"設置なし\":[192, 192, 192],\n    \"未回答\":[137, 137, 137],\n}\n\nconst colorRange = [\n    [1, 152, 189],\n    [73, 227, 206],\n    [216, 254, 181],\n    [254, 237, 177],\n    [254, 173, 84],\n    [209, 55, 78]\n  ];\n  \nexport default props => {\n  const { data, layerType,  hospitalState, onHover, onClick} = props;\n \n  if (!data) return;\n\n  const statefilter = Object.keys(hospitalState)\n    .filter(key => hospitalState[key])\n    .map(key => convertStats[key]);\n\n  const plotdata = data.filter(d => statefilter.some(v => d[\"医療区分回答\"] === v))\n\n  \n\n  const scatter = new ScatterplotLayer({\n    id: \"scatterplot-layer\",\n    data:plotdata,\n    pickable: true,\n    opacity: 0.5,\n    stroked: true,\n    filled: true,\n    radiusScale: 1,\n    radiusMinPixels: 6,\n    lineWidthMinPixels: 1,\n    getPosition: d => [d[\"経度\"],d[\"緯度\"]],\n    getRadius: 0,\n    getFillColor: d => scatterColor[d[\"医療区分回答\"]],\n    getLineColor: d => scatterColor[d[\"医療区分回答\"]],\n    onClick: onClick,\n    onHover:onHover\n  });\n\n  const hex = new HexagonLayer({\n    id: \"hexagon-layer\",\n    data:plotdata,\n    colorRange,\n    opacity: 0.8,\n    radius: 10000,\n    pickable: true,\n    extruded: true,\n    elevationScale: 60,\n    elevationRange: [0, 3000],\n    getPosition: d => [d[\"経度\"],d[\"緯度\"]],\n    getColorValue: d => {\n        const alllength = d.length;\n        let count = 0;\n        for(let i =0 ; i <  d.length;i++){\n            if(d[i][\"医療区分回答\"] === \"停止\" || d[i][\"医療区分回答\"] === \"制限\")  count++\n        }\n        const percent = ~~(count / alllength * 100)\n        return percent\n    },\n    onClick: onClick,\n    onHover:onHover  \n  });\n\n  const ramify = {\n      \"point\":scatter,\n      \"hex\":hex\n  }\n\n  const layers = [ramify[layerType]];\n\n  return layers;\n};\n"]},"metadata":{},"sourceType":"module"}