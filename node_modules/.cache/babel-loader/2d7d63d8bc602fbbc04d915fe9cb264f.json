{"ast":null,"code":"import JSZip from 'jszip';\nexport var ZipWriter = {\n  name: 'Zip Archive',\n  extensions: ['zip'],\n  category: 'archive',\n  mimeType: 'application/zip',\n  encode: encodeZipAsync\n};\n\nfunction encodeZipAsync(fileMap, options) {\n  var jsZip = new JSZip();\n\n  for (var subFileName in fileMap) {\n    var subFileData = fileMap[subFileName];\n    jsZip.file(subFileName, subFileData, options);\n  }\n\n  options = Object.assign({}, options, {\n    type: 'arraybuffer'\n  });\n  var _options = options,\n      _options$onUpdate = _options.onUpdate,\n      onUpdate = _options$onUpdate === void 0 ? function () {} : _options$onUpdate;\n  return jsZip.generateAsync(options, onUpdate)[\"catch\"](function (error) {\n    options.log.error(\"Unable to write zip archive: \".concat(error));\n    throw error;\n  });\n}","map":{"version":3,"sources":["../../src/zip-writer.js"],"names":["ZipWriter","name","extensions","category","mimeType","encode","encodeZipAsync","jsZip","subFileData","fileMap","options","type","onUpdate"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;AAEA,OAAO,IAAMA,SAAS,GAAG;AACvBC,EAAAA,IAAI,EADmB,aAAA;AAEvBC,EAAAA,UAAU,EAAE,CAFW,KAEX,CAFW;AAGvBC,EAAAA,QAAQ,EAHe,SAAA;AAIvBC,EAAAA,QAAQ,EAJe,iBAAA;AAKvBC,EAAAA,MAAM,EAAEC;AALe,CAAlB;;AAQP,SAAA,cAAA,CAAA,OAAA,EAAA,OAAA,EAA0C;AACxC,MAAMC,KAAK,GAAG,IAAd,KAAc,EAAd;;AAEA,OAAK,IAAL,WAAA,IAAA,OAAA,EAAmC;AACjC,QAAMC,WAAW,GAAGC,OAAO,CAA3B,WAA2B,CAA3B;AAIAF,IAAAA,KAAK,CAALA,IAAAA,CAAAA,WAAAA,EAAAA,WAAAA,EAAAA,OAAAA;AACD;;AAGDG,EAAAA,OAAO,GAAG,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,OAAA,EAA2B;AACnCC,IAAAA,IAAI,EAAE;AAD6B,GAA3B,CAAVD;AAZwC,MAAA,QAAA,GAAA,OAAA;AAAA,MAAA,iBAAA,GAAA,QAAA,CAAA,QAAA;AAAA,MAejCE,QAfiC,GAAA,iBAAA,KAAA,KAAA,CAAA,GAetB,YAAM,CAfgB,CAAA,GAAA,iBAAA;AAiBxC,SAAO,KAAK,CAAL,aAAA,CAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAA6C,UAAA,KAAA,EAAS;AAC3DF,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA,CAAAA,gCAAAA,MAAAA,CAAAA,KAAAA,CAAAA;AACA,UAAA,KAAA;AAFF,GAAO,CAAP;AAID","sourcesContent":["import JSZip from 'jszip';\n\nexport const ZipWriter = {\n  name: 'Zip Archive',\n  extensions: ['zip'],\n  category: 'archive',\n  mimeType: 'application/zip',\n  encode: encodeZipAsync\n};\n\nfunction encodeZipAsync(fileMap, options) {\n  const jsZip = new JSZip();\n  // add files to the zip\n  for (const subFileName in fileMap) {\n    const subFileData = fileMap[subFileName];\n\n    // jszip supports both arraybuffer and string data (the main loaders.gl types)\n    // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n    jsZip.file(subFileName, subFileData, options);\n  }\n\n  // always generate the full zip as an arraybuffer\n  options = Object.assign({}, options, {\n    type: 'arraybuffer'\n  });\n  const {onUpdate = () => {}} = options;\n\n  return jsZip.generateAsync(options, onUpdate).catch(error => {\n    options.log.error(`Unable to write zip archive: ${error}`);\n    throw error;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}