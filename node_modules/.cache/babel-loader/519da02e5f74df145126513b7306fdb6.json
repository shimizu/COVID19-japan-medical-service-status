{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar ColumnarTableBatch = function () {\n  function ColumnarTableBatch(schema, batchSize) {\n    _classCallCheck(this, ColumnarTableBatch);\n\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.length = 0;\n    this.allocated = 0;\n    this.columns = null;\n    this.isChunkComplete = false;\n    this.reallocateColumns();\n  }\n\n  _createClass(ColumnarTableBatch, [{\n    key: \"addRow\",\n    value: function addRow(row) {\n      this.reallocateColumns();\n\n      for (var fieldName in row) {\n        this.columns[fieldName][this.length] = row[fieldName];\n      }\n\n      this.length++;\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete() {\n      this.isChunkComplete = true;\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      if (this.batchSize === 'auto') {\n        return this.isChunkComplete;\n      }\n\n      return this.length >= this.allocated;\n    }\n  }, {\n    key: \"getNormalizedBatch\",\n    value: function getNormalizedBatch() {\n      this.pruneColumns();\n      var columns = Array.isArray(this.schema) ? this.columns : {};\n\n      if (!Array.isArray(this.schema)) {\n        for (var fieldName in this.schema) {\n          var field = this.schema[fieldName];\n          columns[field.name] = this.columns[field.index];\n        }\n      }\n\n      this.columns = null;\n      this.isChunkComplete = false;\n      return {\n        data: columns,\n        schema: this.schema,\n        length: this.length\n      };\n    }\n  }, {\n    key: \"reallocateColumns\",\n    value: function reallocateColumns() {\n      if (this.length < this.allocated) {\n        return;\n      }\n\n      this.allocated = this.allocated > 0 ? this.allocated *= 2 : this.batchSize;\n      this.columns = [];\n\n      for (var fieldName in this.schema) {\n        var field = this.schema[fieldName];\n        var ArrayType = field.type || Float32Array;\n        var oldColumn = this.columns[field.index];\n\n        if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n          var typedArray = new ArrayType(this.allocated);\n          typedArray.set(oldColumn);\n          this.columns[field.index] = typedArray;\n        } else if (oldColumn) {\n          oldColumn.length = this.allocated;\n          this.columns[field.index] = oldColumn;\n        } else {\n          this.columns[field.index] = new ArrayType(this.allocated);\n        }\n      }\n    }\n  }, {\n    key: \"pruneColumns\",\n    value: function pruneColumns() {\n      var _this = this;\n\n      this.columns = this.columns.map(function (column) {\n        return column.slice(0, _this.length);\n      });\n    }\n  }]);\n\n  return ColumnarTableBatch;\n}();\n\nexport { ColumnarTableBatch as default };","map":{"version":3,"sources":["../../../../src/lib/table/columnar-table-batch.js"],"names":["ColumnarTableBatch","row","columns","Array","field","data","schema","length","ArrayType","oldColumn","ArrayBuffer","typedArray","column"],"mappings":"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","sourcesContent":["export default class ColumnarTableBatch {\n  constructor(schema, batchSize) {\n    this.schema = schema;\n    this.batchSize = batchSize;\n\n    this.length = 0;\n    this.allocated = 0;\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    this.reallocateColumns();\n  }\n\n  addRow(row) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this.reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  // Is this TableBatch full?\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete;\n    }\n    return this.length >= this.allocated;\n  }\n\n  getNormalizedBatch() {\n    this.pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = null;\n    this.isChunkComplete = false;\n\n    return {data: columns, schema: this.schema, length: this.length};\n  }\n\n  // HELPERS\n\n  reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : this.batchSize;\n    this.columns = [];\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  pruneColumns() {\n    this.columns = this.columns.map(column => column.slice(0, this.length));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}