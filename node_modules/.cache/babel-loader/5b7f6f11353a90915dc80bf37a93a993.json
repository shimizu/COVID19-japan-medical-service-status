{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nvar DEFAULT_BATCH_SIZE = 100;\n\nvar TableBatchBuilder = function () {\n  function TableBatchBuilder(TableBatchType, schema) {\n    var batchSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BATCH_SIZE;\n\n    _classCallCheck(this, TableBatchBuilder);\n\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.batch = null;\n    this.batchCount = 0;\n  }\n\n  _createClass(TableBatchBuilder, [{\n    key: \"addRow\",\n    value: function addRow(row) {\n      if (!this.batch) {\n        var TableBatchType = this.TableBatchType;\n        this.batch = new TableBatchType(this.schema, this.batchSize);\n      }\n\n      this.batch.addRow(row);\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete() {\n      if (this.batch) {\n        this.batch.chunkComplete();\n      }\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      return this.batch && this.batch.isFull();\n    }\n  }, {\n    key: \"hasBatch\",\n    value: function hasBatch() {\n      return Boolean(this.batch);\n    }\n  }, {\n    key: \"getNormalizedBatch\",\n    value: function getNormalizedBatch() {\n      if (this.batch) {\n        var normalizedBatch = this.batch.getNormalizedBatch();\n        this.batch = null;\n        normalizedBatch.count = this.batchCount;\n        this.batchCount++;\n        return normalizedBatch;\n      }\n\n      return null;\n    }\n  }]);\n\n  return TableBatchBuilder;\n}();\n\nexport { TableBatchBuilder as default };","map":{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","TableBatchBuilder","batchSize","row","TableBatchType","Boolean","normalizedBatch"],"mappings":";;AAAA,IAAMA,kBAAkB,GAAxB,GAAA;;IAEqBC,iB;AACnB,WAAA,iBAAA,CAAA,cAAA,EAAA,MAAA,EAAoE;AAAA,QAAhCC,SAAgC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAApBF,kBAAoB;;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA;;AAClE,SAAA,cAAA,GAAA,cAAA;AACA,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,KAAA,GAAA,IAAA;AACA,SAAA,UAAA,GAAA,CAAA;AACD;;;;2BAEMG,G,EAAK;AACV,UAAI,CAAC,KAAL,KAAA,EAAiB;AAAA,YACRC,cADQ,GAAA,KAAA,cAAA;AAEf,aAAA,KAAA,GAAa,IAAA,cAAA,CAAmB,KAAnB,MAAA,EAAgC,KAA7C,SAAa,CAAb;AACD;;AAED,WAAA,KAAA,CAAA,MAAA,CAAA,GAAA;AACD;;;oCAEe;AACd,UAAI,KAAJ,KAAA,EAAgB;AACd,aAAA,KAAA,CAAA,aAAA;AACD;AACF;;;6BAEQ;AACP,aAAO,KAAA,KAAA,IAAc,KAAA,KAAA,CAArB,MAAqB,EAArB;AACD;;;+BAEU;AACT,aAAOC,OAAO,CAAC,KAAf,KAAc,CAAd;AACD;;;yCAEoB;AACnB,UAAI,KAAJ,KAAA,EAAgB;AACd,YAAMC,eAAe,GAAG,KAAA,KAAA,CAAxB,kBAAwB,EAAxB;AACA,aAAA,KAAA,GAAA,IAAA;AACAA,QAAAA,eAAe,CAAfA,KAAAA,GAAwB,KAAxBA,UAAAA;AACA,aAAA,UAAA;AACA,eAAA,eAAA;AACD;;AACD,aAAA,IAAA;AACD;;;;;;SAzCkBL,iB","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, batchSize = DEFAULT_BATCH_SIZE) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.batch = null;\n    this.batchCount = 0;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.batchSize);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete() {\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getNormalizedBatch() {\n    if (this.batch) {\n      const normalizedBatch = this.batch.getNormalizedBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      return normalizedBatch;\n    }\n    return null;\n  }\n\n  // complete() {\n  //   let batch = null;\n  //   if (this.batch) {\n  //     batch = this.batch;\n  //     batch.complete();\n  //     this.batch = null;\n  //   }\n  //   return batch;\n  // }\n}\n"]},"metadata":{},"sourceType":"module"}