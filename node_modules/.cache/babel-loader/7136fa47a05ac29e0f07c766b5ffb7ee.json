{"ast":null,"code":"import { ScatterplotLayer, HexagonLayer } from \"deck.gl\";\nexport default (props => {\n  const {\n    data,\n    layerType,\n    hospitalState\n  } = props;\n  console.log(data);\n  return [];\n  if (!data) return;\n  const scatter = new ScatterplotLayer({\n    id: \"scatterplot-layer\",\n    data,\n    pickable: true,\n    opacity: 0.8,\n    stroked: true,\n    filled: true,\n    radiusScale: 6,\n    radiusMinPixels: 1,\n    radiusMaxPixels: 100,\n    lineWidthMinPixels: 1,\n    getPosition: d => d.coordinates,\n    getRadius: d => Math.sqrt(d.exits),\n    getFillColor: d => [255, 140, 0],\n    getLineColor: d => [0, 0, 0],\n    onHover: ({\n      object,\n      x,\n      y\n    }) => {\n      console.log(object);\n    }\n  });\n  const hex = new HexagonLayer({\n    id: \"hexagon-layer\",\n    data,\n    pickable: true,\n    extruded: true,\n    radius: 200,\n    elevationScale: 4,\n    getPosition: d => d.COORDINATES,\n    onHover: ({\n      object,\n      x,\n      y\n    }) => {\n      console.log(object);\n    }\n  });\n  const layers = [scatter];\n  return layers;\n});","map":{"version":3,"sources":["/Users/idg08/Desktop/works/hospital/src/components/Layers.js"],"names":["ScatterplotLayer","HexagonLayer","props","data","layerType","hospitalState","console","log","scatter","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","getPosition","d","coordinates","getRadius","Math","sqrt","exits","getFillColor","getLineColor","onHover","object","x","y","hex","extruded","radius","elevationScale","COORDINATES","layers"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,YAA3B,QAA+C,SAA/C;AAEA,gBAAeC,KAAK,IAAI;AACtB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,SAAR;AAAoBC,IAAAA;AAApB,MAAqCH,KAA3C;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,SAAO,EAAP;AACA,MAAI,CAACA,IAAL,EAAW;AAEX,QAAMK,OAAO,GAAG,IAAIR,gBAAJ,CAAqB;AACnCS,IAAAA,EAAE,EAAE,mBAD+B;AAEnCN,IAAAA,IAFmC;AAGnCO,IAAAA,QAAQ,EAAE,IAHyB;AAInCC,IAAAA,OAAO,EAAE,GAJ0B;AAKnCC,IAAAA,OAAO,EAAE,IAL0B;AAMnCC,IAAAA,MAAM,EAAE,IAN2B;AAOnCC,IAAAA,WAAW,EAAE,CAPsB;AAQnCC,IAAAA,eAAe,EAAE,CARkB;AASnCC,IAAAA,eAAe,EAAE,GATkB;AAUnCC,IAAAA,kBAAkB,EAAE,CAVe;AAWnCC,IAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAACC,WAXe;AAYnCC,IAAAA,SAAS,EAAEF,CAAC,IAAIG,IAAI,CAACC,IAAL,CAAUJ,CAAC,CAACK,KAAZ,CAZmB;AAanCC,IAAAA,YAAY,EAAEN,CAAC,IAAI,CAAC,GAAD,EAAM,GAAN,EAAW,CAAX,CAbgB;AAcnCO,IAAAA,YAAY,EAAEP,CAAC,IAAI,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAdgB;AAenCQ,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,CAAV;AAAaC,MAAAA;AAAb,KAAD,KAAsB;AAC7BxB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAZ;AACD;AAjBkC,GAArB,CAAhB;AAoBA,QAAMG,GAAG,GAAG,IAAI9B,YAAJ,CAAiB;AAC3BQ,IAAAA,EAAE,EAAE,eADuB;AAE3BN,IAAAA,IAF2B;AAG3BO,IAAAA,QAAQ,EAAE,IAHiB;AAI3BsB,IAAAA,QAAQ,EAAE,IAJiB;AAK3BC,IAAAA,MAAM,EAAE,GALmB;AAM3BC,IAAAA,cAAc,EAAE,CANW;AAO3BhB,IAAAA,WAAW,EAAEC,CAAC,IAAIA,CAAC,CAACgB,WAPO;AAQ3BR,IAAAA,OAAO,EAAE,CAAC;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,CAAV;AAAaC,MAAAA;AAAb,KAAD,KAAsB;AAC7BxB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,MAAZ;AACD;AAV0B,GAAjB,CAAZ;AAaA,QAAMQ,MAAM,GAAG,CAAC5B,OAAD,CAAf;AAEA,SAAO4B,MAAP;AACD,CA3CD","sourcesContent":["import { ScatterplotLayer, HexagonLayer } from \"deck.gl\";\n\nexport default props => {\n  const { data, layerType,  hospitalState} = props;\n  console.log(data)\n\n  return [];\n  if (!data) return;\n\n  const scatter = new ScatterplotLayer({\n    id: \"scatterplot-layer\",\n    data,\n    pickable: true,\n    opacity: 0.8,\n    stroked: true,\n    filled: true,\n    radiusScale: 6,\n    radiusMinPixels: 1,\n    radiusMaxPixels: 100,\n    lineWidthMinPixels: 1,\n    getPosition: d => d.coordinates,\n    getRadius: d => Math.sqrt(d.exits),\n    getFillColor: d => [255, 140, 0],\n    getLineColor: d => [0, 0, 0],\n    onHover: ({ object, x, y }) => {\n      console.log(object);\n    }\n  });\n\n  const hex = new HexagonLayer({\n    id: \"hexagon-layer\",\n    data,\n    pickable: true,\n    extruded: true,\n    radius: 200,\n    elevationScale: 4,\n    getPosition: d => d.COORDINATES,\n    onHover: ({ object, x, y }) => {\n      console.log(object);\n    }\n  });\n\n  const layers = [scatter];\n\n  return layers;\n};\n"]},"metadata":{},"sourceType":"module"}