{"ast":null,"code":"export default function parseXML(xml) {\n  if (window.DOMParser) {\n    var xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');\n    var parseError = isXMLParseError(xmlDoc);\n\n    if (parseError) {\n      throw new Error(parseError);\n    }\n\n    return xmlDoc;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined') {\n    var _xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n\n    if (_xmlDoc) {\n      _xmlDoc.async = 'false';\n\n      _xmlDoc.loadXML(xml);\n\n      return _xmlDoc;\n    }\n  }\n\n  throw new Error('No XML parser available');\n}\nexport function parseXMLSupported() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (window.DOMParser) {\n    return true;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isXMLParseError(parsedDocument) {\n  var parser = new DOMParser();\n  var erroneousParse = parser.parseFromString('<', 'text/xml');\n  var parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;\n\n  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {\n    var errorElements = parsedDocument.getElementsByTagName('parsererror');\n    return errorElements.length ? errorElements[0].innerHTML : null;\n  }\n\n  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;\n}","map":{"version":3,"sources":["../../../../src/lib/xml/parse-xml.js"],"names":["window","xmlDoc","parseError","isXMLParseError","parser","erroneousParse","parsererrorNS","errorElements","parsedDocument"],"mappings":"AACA,eAAe,SAAA,QAAA,CAAA,GAAA,EAAuB;AACpC,MAAIA,MAAM,CAAV,SAAA,EAAsB;AACpB,QAAMC,MAAM,GAAG,IAAID,MAAM,CAAV,SAAA,GAAA,eAAA,CAAA,GAAA,EAAf,iBAAe,CAAf;AACA,QAAME,UAAU,GAAGC,eAAe,CAAlC,MAAkC,CAAlC;;AACA,QAAA,UAAA,EAAgB;AACd,YAAM,IAAA,KAAA,CAAN,UAAM,CAAN;AACD;;AACD,WAAA,MAAA;AACD;;AAED,MAAI,OAAOH,MAAM,CAAb,aAAA,KAAJ,WAAA,EAAiD;AAC/C,QAAMC,OAAM,GAAG,IAAID,MAAM,CAAV,aAAA,CAAf,kBAAe,CAAf;;AACA,QAAA,OAAA,EAAY;AACVC,MAAAA,OAAM,CAANA,KAAAA,GAAAA,OAAAA;;AACAA,MAAAA,OAAM,CAANA,OAAAA,CAAAA,GAAAA;;AACA,aAAA,OAAA;AACD;AACF;;AAED,QAAM,IAAA,KAAA,CAAN,yBAAM,CAAN;AACD;AAED,OAAO,SAAA,iBAAA,GAA6B;AAClC,MAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC,WAAA,KAAA;AACD;;AAED,MAAID,MAAM,CAAV,SAAA,EAAsB;AACpB,WAAA,IAAA;AACD;;AAED,MAAI,OAAOA,MAAM,CAAb,aAAA,KAAA,WAAA,IAA+C,IAAIA,MAAM,CAAV,aAAA,CAAnD,kBAAmD,CAAnD,EAAiG;AAC/F,WAAA,IAAA;AACD;;AAED,SAAA,KAAA;AACD;;AAGD,SAAA,eAAA,CAAA,cAAA,EAAyC;AACvC,MAAMI,MAAM,GAAG,IAAf,SAAe,EAAf;AACA,MAAMC,cAAc,GAAGD,MAAM,CAANA,eAAAA,CAAAA,GAAAA,EAAvB,UAAuBA,CAAvB;AACA,MAAME,aAAa,GAAGD,cAAc,CAAdA,oBAAAA,CAAAA,aAAAA,EAAAA,CAAAA,EAAtB,YAAA;;AAEA,MAAIC,aAAa,KAAjB,8BAAA,EAAsD;AAGpD,QAAMC,aAAa,GAAGC,cAAc,CAAdA,oBAAAA,CAAtB,aAAsBA,CAAtB;AACA,WAAOD,aAAa,CAAbA,MAAAA,GAAuBA,aAAa,CAAbA,CAAa,CAAbA,CAAvBA,SAAAA,GAAP,IAAA;AACD;;AAED,SAAOC,cAAc,CAAdA,sBAAAA,CAAAA,aAAAA,EAAAA,aAAAA,EAAAA,MAAAA,GAAP,CAAA;AACD","sourcesContent":["/* global window, DOMParser */\nexport default function parseXML(xml) {\n  if (window.DOMParser) {\n    const xmlDoc = new window.DOMParser().parseFromString(xml, 'application/xml');\n    const parseError = isXMLParseError(xmlDoc);\n    if (parseError) {\n      throw new Error(parseError);\n    }\n    return xmlDoc;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined') {\n    const xmlDoc = new window.ActiveXObject('Microsoft.XMLDOM');\n    if (xmlDoc) {\n      xmlDoc.async = 'false';\n      xmlDoc.loadXML(xml);\n      return xmlDoc;\n    }\n  }\n\n  throw new Error('No XML parser available');\n}\n\nexport function parseXMLSupported() {\n  if (typeof window === 'undefined') {\n    return false;\n  }\n\n  if (window.DOMParser) {\n    return true;\n  }\n\n  if (typeof window.ActiveXObject !== 'undefined' && new window.ActiveXObject('Microsoft.XMLDOM')) {\n    return true;\n  }\n\n  return false;\n}\n\n// https://stackoverflow.com/questions/11563554/how-do-i-detect-xml-parsing-errors-when-using-javascripts-domparser-in-a-cross\nfunction isXMLParseError(parsedDocument) {\n  const parser = new DOMParser();\n  const erroneousParse = parser.parseFromString('<', 'text/xml');\n  const parsererrorNS = erroneousParse.getElementsByTagName('parsererror')[0].namespaceURI;\n\n  if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {\n    // In PhantomJS the parseerror element doesn't seem to have a special namespace,\n    // so we are just guessing here :(\n    const errorElements = parsedDocument.getElementsByTagName('parsererror');\n    return errorElements.length ? errorElements[0].innerHTML : null;\n  }\n\n  return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;\n}\n"]},"metadata":{},"sourceType":"module"}