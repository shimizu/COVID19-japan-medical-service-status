{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\n\nvar RowTableBatch = function () {\n  function RowTableBatch(schema, batchSize) {\n    _classCallCheck(this, RowTableBatch);\n\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.rows = null;\n    this.length = 0;\n    this.isChunkComplete = false;\n\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n\n      for (var key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  _createClass(RowTableBatch, [{\n    key: \"addRow\",\n    value: function addRow(row) {\n      if (!this.rows) {\n        this.rows = new Array(this.batchSize);\n        this.length = 0;\n      }\n\n      this.rows[this.length] = convertRowToObject(row, this._headers);\n      this.length++;\n    }\n  }, {\n    key: \"chunkComplete\",\n    value: function chunkComplete() {\n      this.isChunkComplete = true;\n    }\n  }, {\n    key: \"isFull\",\n    value: function isFull() {\n      if (this.batchSize === 'auto') {\n        return this.isChunkComplete && this.length > 0;\n      }\n\n      return this.rows && this.length >= this.batchSize;\n    }\n  }, {\n    key: \"getNormalizedBatch\",\n    value: function getNormalizedBatch() {\n      if (this.rows) {\n        var rows = this.rows.slice(0, this.length);\n        this.rows = null;\n        this.isChunkComplete = false;\n        return {\n          data: rows,\n          schema: this.schema,\n          length: rows.length\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  return RowTableBatch;\n}();\n\nexport { RowTableBatch as default };\n\nfunction convertRowToObject(row, headers) {\n  if (!row) {\n    throw new Error('null row');\n  }\n\n  if (!Array.isArray(row)) {\n    return row;\n  }\n\n  if (!headers) {\n    return row;\n  }\n\n  var result = {};\n\n  for (var i = 0; i < headers.length; i++) {\n    result[headers[i]] = row[i];\n  }\n\n  return result;\n}","map":{"version":3,"sources":["../../../../src/lib/table/row-table-batch.js"],"names":["RowTableBatch","Array","schema","row","convertRowToObject","rows","data","length","result","i","headers"],"mappings":";;;IAAqBA,a;AACnB,WAAA,aAAA,CAAA,MAAA,EAAA,SAAA,EAA+B;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA;;AAC7B,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,SAAA,GAAA,SAAA;AACA,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,CAAA;AACA,SAAA,eAAA,GAAA,KAAA;;AAIA,QAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,MAAKA,CAAL,EAA4B;AAC1B,WAAA,QAAA,GAAA,EAAA;;AACA,WAAK,IAAL,GAAA,IAAA,MAAA,EAA0B;AACxB,aAAA,QAAA,CAAcC,MAAM,CAANA,GAAM,CAANA,CAAd,KAAA,IAAmCA,MAAM,CAANA,GAAM,CAANA,CAAnC,IAAA;AACD;AACF;AACF;;;;2BAEMC,G,EAAK;AACV,UAAI,CAAC,KAAL,IAAA,EAAgB;AACd,aAAA,IAAA,GAAY,IAAA,KAAA,CAAU,KAAtB,SAAY,CAAZ;AACA,aAAA,MAAA,GAAA,CAAA;AACD;;AACD,WAAA,IAAA,CAAU,KAAV,MAAA,IAAyBC,kBAAkB,CAAA,GAAA,EAAM,KAAjD,QAA2C,CAA3C;AACA,WAAA,MAAA;AACD;;;oCAEe;AACd,WAAA,eAAA,GAAA,IAAA;AACD;;;6BAEQ;AACP,UAAI,KAAA,SAAA,KAAJ,MAAA,EAA+B;AAC7B,eAAO,KAAA,eAAA,IAAwB,KAAA,MAAA,GAA/B,CAAA;AACD;;AACD,aAAO,KAAA,IAAA,IAAa,KAAA,MAAA,IAAe,KAAnC,SAAA;AACD;;;yCAEoB;AACnB,UAAI,KAAJ,IAAA,EAAe;AACb,YAAMC,IAAI,GAAG,KAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAmB,KAAhC,MAAa,CAAb;AACA,aAAA,IAAA,GAAA,IAAA;AACA,aAAA,eAAA,GAAA,KAAA;AACA,eAAO;AAACC,UAAAA,IAAI,EAAL,IAAA;AAAaJ,UAAAA,MAAM,EAAE,KAArB,MAAA;AAAkCK,UAAAA,MAAM,EAAEF,IAAI,CAACE;AAA/C,SAAP;AACD;;AACD,aAAA,IAAA;AACD;;;;;;SA9CkBP,a;;AAiDrB,SAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAA0C;AACxC,MAAI,CAAJ,GAAA,EAAU;AACR,UAAM,IAAA,KAAA,CAAN,UAAM,CAAN;AACD;;AACD,MAAI,CAACC,KAAK,CAALA,OAAAA,CAAL,GAAKA,CAAL,EAAyB;AACvB,WAAA,GAAA;AACD;;AAED,MAAI,CAAJ,OAAA,EAAc;AACZ,WAAA,GAAA;AACD;;AACD,MAAMO,MAAM,GAAZ,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGC,OAAO,CAA3B,MAAA,EAAoCD,CAApC,EAAA,EAAyC;AACvCD,IAAAA,MAAM,CAACE,OAAO,CAAdF,CAAc,CAAR,CAANA,GAAqBL,GAAG,CAAxBK,CAAwB,CAAxBA;AACD;;AACD,SAAA,MAAA;AACD","sourcesContent":["export default class RowTableBatch {\n  constructor(schema, batchSize) {\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.rows = null;\n    this.length = 0;\n    this.isChunkComplete = false;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  addRow(row) {\n    if (!this.rows) {\n      this.rows = new Array(this.batchSize);\n      this.length = 0;\n    }\n    this.rows[this.length] = convertRowToObject(row, this._headers);\n    this.length++;\n  }\n\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete && this.length > 0;\n    }\n    return this.rows && this.length >= this.batchSize;\n  }\n\n  getNormalizedBatch() {\n    if (this.rows) {\n      const rows = this.rows.slice(0, this.length);\n      this.rows = null;\n      this.isChunkComplete = false;\n      return {data: rows, schema: this.schema, length: rows.length};\n    }\n    return null;\n  }\n}\n\nfunction convertRowToObject(row, headers) {\n  if (!row) {\n    throw new Error('null row');\n  }\n  if (!Array.isArray(row)) {\n    return row;\n  }\n\n  if (!headers) {\n    return row;\n  }\n  const result = {};\n  for (let i = 0; i < headers.length; i++) {\n    result[headers[i]] = row[i];\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}