{"ast":null,"code":"async function decodeText(buffer, charset = \"utf-8\") {\n  // Encoding API\n  if (window.TextDecoder) {\n    const decoder = new TextDecoder(charset);\n    return decoder.decode(buffer);\n  } // FileReader API\n\n\n  return new Promise((resolve, reject) => {\n    const blob = new Blob([buffer], {\n      type: `text/plain;charset=${charset}`\n    });\n    const reader = new FileReader();\n\n    reader.onload = () => {\n      resolve(reader.result);\n    };\n\n    reader.onerror = () => {\n      reject(reader.error);\n    };\n\n    reader.readAsText(blob, charset);\n  });\n}\n\nexport default decodeText;","map":{"version":3,"sources":["/Users/idg08/Desktop/works/hospital/src/components/DecodeText.js"],"names":["decodeText","buffer","charset","window","TextDecoder","decoder","decode","Promise","resolve","reject","blob","Blob","type","reader","FileReader","onload","result","onerror","error","readAsText"],"mappings":"AACA,eAAeA,UAAf,CAA0BC,MAA1B,EAAkCC,OAAO,GAAC,OAA1C,EAAmD;AAC/C;AACA,MAAIC,MAAM,CAACC,WAAX,EAAwB;AACpB,UAAMC,OAAO,GAAG,IAAID,WAAJ,CAAgBF,OAAhB,CAAhB;AACA,WAAOG,OAAO,CAACC,MAAR,CAAeL,MAAf,CAAP;AACH,GAL8C,CAO/C;;;AACA,SAAO,IAAIM,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACV,MAAD,CAAT,EAAmB;AAACW,MAAAA,IAAI,EAAE,sBAAqBV,OAAQ;AAApC,KAAnB,CAAb;AACA,UAAMW,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AAClBP,MAAAA,OAAO,CAACK,MAAM,CAACG,MAAR,CAAP;AACH,KAFD;;AAGAH,IAAAA,MAAM,CAACI,OAAP,GAAiB,MAAM;AACnBR,MAAAA,MAAM,CAACI,MAAM,CAACK,KAAR,CAAN;AACH,KAFD;;AAGAL,IAAAA,MAAM,CAACM,UAAP,CAAkBT,IAAlB,EAAwBR,OAAxB;AACH,GAVM,CAAP;AAWH;;AAED,eAAeF,UAAf","sourcesContent":["\nasync function decodeText(buffer, charset=\"utf-8\") {\n    // Encoding API\n    if (window.TextDecoder) {\n        const decoder = new TextDecoder(charset);\n        return decoder.decode(buffer);\n    }\n\n    // FileReader API\n    return new Promise((resolve, reject) => {\n        const blob = new Blob([buffer], {type:`text/plain;charset=${charset}`});\n        const reader = new FileReader();\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n        reader.onerror = () => {\n            reject(reader.error);\n        }\n        reader.readAsText(blob, charset);\n    });\n}\n\nexport default decodeText;"]},"metadata":{},"sourceType":"module"}