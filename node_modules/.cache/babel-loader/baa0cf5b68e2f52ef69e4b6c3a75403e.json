{"ast":null,"code":"import { ScatterplotLayer, HexagonLayer } from \"deck.gl\";\nconst convertStats = {\n  normal: \"通常\",\n  restriction: \"制限\",\n  stop: \"停止\",\n  nobeds: \"設置なし\",\n  unanswered: \"未回答\"\n};\nconst scatterColor = {\n  \"通常\": [23, 190, 187],\n  \"制限\": [238, 198, 67],\n  \"停止\": [214, 34, 70],\n  \"設置なし\": [192, 192, 192],\n  \"未回答\": [137, 137, 137]\n};\nconst colorRange = [[1, 152, 189], [73, 227, 206], [216, 254, 181], [254, 237, 177], [254, 173, 84], [209, 55, 78]];\nexport default (props => {\n  const {\n    data,\n    layerType,\n    hospitalState\n  } = props;\n  if (!data) return;\n  const statefilter = Object.keys(hospitalState).filter(key => hospitalState[key]).map(key => convertStats[key]);\n  const plotdata = data.filter(d => statefilter.some(v => d[\"医療区分回答\"] === v));\n  const scatter = new ScatterplotLayer({\n    id: \"scatterplot-layer\",\n    data: plotdata,\n    pickable: true,\n    opacity: 0.5,\n    stroked: true,\n    filled: true,\n    radiusScale: 1,\n    radiusMinPixels: 6,\n    lineWidthMinPixels: 1,\n    getPosition: d => [d[\"経度\"], d[\"緯度\"]],\n    getRadius: 0,\n    getFillColor: d => scatterColor[d[\"医療区分回答\"]],\n    getLineColor: d => scatterColor[d[\"医療区分回答\"]],\n    onHover: ({\n      object,\n      x,\n      y\n    }) => {\n      console.log(object);\n    }\n  });\n  const hex = new HexagonLayer({\n    id: \"hexagon-layer\",\n    data: plotdata,\n    colorRange,\n    opacity: 0.8,\n    radius: 10000,\n    pickable: true,\n    extruded: true,\n    elevationScale: 60,\n    elevationRange: [0, 3000],\n    getPosition: d => [d[\"経度\"], d[\"緯度\"]],\n    getColorValue: d => {\n      const alllength = d.length;\n      let count = 0;\n\n      for (let i = 0; i < d.length; i++) {\n        if (d[i][\"医療区分回答\"] === \"停止\" || d[i][\"医療区分回答\"] === \"制限\") count++;\n      }\n\n      const percent = ~~(count / alllength * 100);\n      return percent;\n    },\n    onHover: ({\n      object,\n      x,\n      y\n    }) => {\n      console.log(object);\n    }\n  });\n  const ramify = {\n    \"point\": scatter,\n    \"hex\": hex\n  };\n  const layers = [ramify[layerType]];\n  return layers;\n});","map":{"version":3,"sources":["/Users/idg08/Desktop/works/hospital/src/components/Layers.js"],"names":["ScatterplotLayer","HexagonLayer","convertStats","normal","restriction","stop","nobeds","unanswered","scatterColor","colorRange","props","data","layerType","hospitalState","statefilter","Object","keys","filter","key","map","plotdata","d","some","v","scatter","id","pickable","opacity","stroked","filled","radiusScale","radiusMinPixels","lineWidthMinPixels","getPosition","getRadius","getFillColor","getLineColor","onHover","object","x","y","console","log","hex","radius","extruded","elevationScale","elevationRange","getColorValue","alllength","length","count","i","percent","ramify","layers"],"mappings":"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","sourcesContent":["import { ScatterplotLayer, HexagonLayer } from \"deck.gl\";\n\n\nconst convertStats = {\n    normal:\"通常\",\n    restriction:\"制限\",\n    stop :\"停止\",\n    nobeds :\"設置なし\",\n    unanswered :\"未回答\",\n}\n\nconst scatterColor = {\n    \"通常\":[23, 190, 187],\n    \"制限\":[238, 198, 67],\n    \"停止\":[214, 34, 70],\n    \"設置なし\":[192, 192, 192],\n    \"未回答\":[137, 137, 137],\n}\n\nconst colorRange = [\n    [1, 152, 189],\n    [73, 227, 206],\n    [216, 254, 181],\n    [254, 237, 177],\n    [254, 173, 84],\n    [209, 55, 78]\n  ];\n  \nexport default props => {\n  const { data, layerType,  hospitalState} = props;\n \n  if (!data) return;\n\n  const statefilter = Object.keys(hospitalState)\n    .filter(key => hospitalState[key])\n    .map(key => convertStats[key]);\n\n  const plotdata = data.filter(d => statefilter.some(v => d[\"医療区分回答\"] === v))\n\n  \n\n  const scatter = new ScatterplotLayer({\n    id: \"scatterplot-layer\",\n    data:plotdata,\n    pickable: true,\n    opacity: 0.5,\n    stroked: true,\n    filled: true,\n    radiusScale: 1,\n    radiusMinPixels: 6,\n    lineWidthMinPixels: 1,\n    getPosition: d => [d[\"経度\"],d[\"緯度\"]],\n    getRadius: 0,\n    getFillColor: d => scatterColor[d[\"医療区分回答\"]],\n    getLineColor: d => scatterColor[d[\"医療区分回答\"]],\n    onHover: ({ object, x, y }) => {\n      console.log(object);\n    }\n  });\n\n  const hex = new HexagonLayer({\n    id: \"hexagon-layer\",\n    data:plotdata,\n    colorRange,\n    opacity: 0.8,\n    radius: 10000,\n    pickable: true,\n    extruded: true,\n    elevationScale: 60,\n    elevationRange: [0, 3000],\n    getPosition: d => [d[\"経度\"],d[\"緯度\"]],\n    getColorValue: d => {\n        const alllength = d.length;\n        let count = 0;\n        for(let i =0 ; i <  d.length;i++){\n            if(d[i][\"医療区分回答\"] === \"停止\" || d[i][\"医療区分回答\"] === \"制限\")  count++\n        }\n        const percent = ~~(count / alllength * 100)\n        return percent\n    },\n    onHover: ({ object, x, y }) => {\n        console.log(object);\n      }    \n  });\n\n  const ramify = {\n      \"point\":scatter,\n      \"hex\":hex\n  }\n\n  const layers = [ramify[layerType]];\n\n  return layers;\n};\n"]},"metadata":{},"sourceType":"module"}