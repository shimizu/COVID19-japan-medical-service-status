{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","TableBatchBuilder","constructor","TableBatchType","schema","batchSize","batch","batchCount","addRow","row","chunkComplete","isFull","hasBatch","Boolean","getNormalizedBatch","normalizedBatch","count"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,GAA3B;AAEA,eAAe,MAAMC,iBAAN,CAAwB;AACrCC,EAAAA,WAAW,CAACC,cAAD,EAAiBC,MAAjB,EAAyBC,SAAS,GAAGL,kBAArC,EAAyD;AAClE,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACD;;AAEDC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,QAAI,CAAC,KAAKH,KAAV,EAAiB;AACf,YAAM;AAACH,QAAAA;AAAD,UAAmB,IAAzB;AACA,WAAKG,KAAL,GAAa,IAAIH,cAAJ,CAAmB,KAAKC,MAAxB,EAAgC,KAAKC,SAArC,CAAb;AACD;;AAED,SAAKC,KAAL,CAAWE,MAAX,CAAkBC,GAAlB;AACD;;AAEDC,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKJ,KAAT,EAAgB;AACd,WAAKA,KAAL,CAAWI,aAAX;AACD;AACF;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKL,KAAL,IAAc,KAAKA,KAAL,CAAWK,MAAX,EAArB;AACD;;AAEDC,EAAAA,QAAQ,GAAG;AACT,WAAOC,OAAO,CAAC,KAAKP,KAAN,CAAd;AACD;;AAEDQ,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKR,KAAT,EAAgB;AACd,YAAMS,eAAe,GAAG,KAAKT,KAAL,CAAWQ,kBAAX,EAAxB;AACA,WAAKR,KAAL,GAAa,IAAb;AACAS,MAAAA,eAAe,CAACC,KAAhB,GAAwB,KAAKT,UAA7B;AACA,WAAKA,UAAL;AACA,aAAOQ,eAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAzCoC","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, batchSize = DEFAULT_BATCH_SIZE) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.batch = null;\n    this.batchCount = 0;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.batchSize);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete() {\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getNormalizedBatch() {\n    if (this.batch) {\n      const normalizedBatch = this.batch.getNormalizedBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      return normalizedBatch;\n    }\n    return null;\n  }\n\n  // complete() {\n  //   let batch = null;\n  //   if (this.batch) {\n  //     batch = this.batch;\n  //     batch.complete();\n  //     this.batch = null;\n  //   }\n  //   return batch;\n  // }\n}\n"],"file":"table-batch-builder.js"}