{"version":3,"sources":["../../../../src/lib/table/row-table-batch.js"],"names":["RowTableBatch","constructor","schema","batchSize","rows","length","isChunkComplete","Array","isArray","_headers","key","index","name","addRow","row","convertRowToObject","chunkComplete","isFull","getNormalizedBatch","slice","data","headers","Error","result","i"],"mappings":"AAAA,eAAe,MAAMA,aAAN,CAAoB;AACjCC,EAAAA,WAAW,CAACC,MAAD,EAASC,SAAT,EAAoB;AAC7B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAY,IAAZ;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,eAAL,GAAuB,KAAvB;;AAIA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcN,MAAd,CAAL,EAA4B;AAC1B,WAAKO,QAAL,GAAgB,EAAhB;;AACA,WAAK,MAAMC,GAAX,IAAkBR,MAAlB,EAA0B;AACxB,aAAKO,QAAL,CAAcP,MAAM,CAACQ,GAAD,CAAN,CAAYC,KAA1B,IAAmCT,MAAM,CAACQ,GAAD,CAAN,CAAYE,IAA/C;AACD;AACF;AACF;;AAEDC,EAAAA,MAAM,CAACC,GAAD,EAAM;AACV,QAAI,CAAC,KAAKV,IAAV,EAAgB;AACd,WAAKA,IAAL,GAAY,IAAIG,KAAJ,CAAU,KAAKJ,SAAf,CAAZ;AACA,WAAKE,MAAL,GAAc,CAAd;AACD;;AACD,SAAKD,IAAL,CAAU,KAAKC,MAAf,IAAyBU,kBAAkB,CAACD,GAAD,EAAM,KAAKL,QAAX,CAA3C;AACA,SAAKJ,MAAL;AACD;;AAEDW,EAAAA,aAAa,GAAG;AACd,SAAKV,eAAL,GAAuB,IAAvB;AACD;;AAEDW,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKd,SAAL,KAAmB,MAAvB,EAA+B;AAC7B,aAAO,KAAKG,eAAL,IAAwB,KAAKD,MAAL,GAAc,CAA7C;AACD;;AACD,WAAO,KAAKD,IAAL,IAAa,KAAKC,MAAL,IAAe,KAAKF,SAAxC;AACD;;AAEDe,EAAAA,kBAAkB,GAAG;AACnB,QAAI,KAAKd,IAAT,EAAe;AACb,YAAMA,IAAI,GAAG,KAAKA,IAAL,CAAUe,KAAV,CAAgB,CAAhB,EAAmB,KAAKd,MAAxB,CAAb;AACA,WAAKD,IAAL,GAAY,IAAZ;AACA,WAAKE,eAAL,GAAuB,KAAvB;AACA,aAAO;AAACc,QAAAA,IAAI,EAAEhB,IAAP;AAAaF,QAAAA,MAAM,EAAE,KAAKA,MAA1B;AAAkCG,QAAAA,MAAM,EAAED,IAAI,CAACC;AAA/C,OAAP;AACD;;AACD,WAAO,IAAP;AACD;;AA9CgC;;AAiDnC,SAASU,kBAAT,CAA4BD,GAA5B,EAAiCO,OAAjC,EAA0C;AACxC,MAAI,CAACP,GAAL,EAAU;AACR,UAAM,IAAIQ,KAAJ,CAAU,UAAV,CAAN;AACD;;AACD,MAAI,CAACf,KAAK,CAACC,OAAN,CAAcM,GAAd,CAAL,EAAyB;AACvB,WAAOA,GAAP;AACD;;AAED,MAAI,CAACO,OAAL,EAAc;AACZ,WAAOP,GAAP;AACD;;AACD,QAAMS,MAAM,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAAChB,MAA5B,EAAoCmB,CAAC,EAArC,EAAyC;AACvCD,IAAAA,MAAM,CAACF,OAAO,CAACG,CAAD,CAAR,CAAN,GAAqBV,GAAG,CAACU,CAAD,CAAxB;AACD;;AACD,SAAOD,MAAP;AACD","sourcesContent":["export default class RowTableBatch {\n  constructor(schema, batchSize) {\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.rows = null;\n    this.length = 0;\n    this.isChunkComplete = false;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  addRow(row) {\n    if (!this.rows) {\n      this.rows = new Array(this.batchSize);\n      this.length = 0;\n    }\n    this.rows[this.length] = convertRowToObject(row, this._headers);\n    this.length++;\n  }\n\n  chunkComplete() {\n    this.isChunkComplete = true;\n  }\n\n  isFull() {\n    if (this.batchSize === 'auto') {\n      return this.isChunkComplete && this.length > 0;\n    }\n    return this.rows && this.length >= this.batchSize;\n  }\n\n  getNormalizedBatch() {\n    if (this.rows) {\n      const rows = this.rows.slice(0, this.length);\n      this.rows = null;\n      this.isChunkComplete = false;\n      return {data: rows, schema: this.schema, length: rows.length};\n    }\n    return null;\n  }\n}\n\nfunction convertRowToObject(row, headers) {\n  if (!row) {\n    throw new Error('null row');\n  }\n  if (!Array.isArray(row)) {\n    return row;\n  }\n\n  if (!headers) {\n    return row;\n  }\n  const result = {};\n  for (let i = 0; i < headers.length; i++) {\n    result[headers[i]] = row[i];\n  }\n  return result;\n}\n"],"file":"row-table-batch.js"}