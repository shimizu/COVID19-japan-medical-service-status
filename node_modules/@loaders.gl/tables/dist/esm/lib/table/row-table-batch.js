import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";

var RowTableBatch = function () {
  function RowTableBatch(schema, batchSize) {
    _classCallCheck(this, RowTableBatch);

    this.schema = schema;
    this.batchSize = batchSize;
    this.rows = null;
    this.length = 0;
    this.isChunkComplete = false;

    if (!Array.isArray(schema)) {
      this._headers = [];

      for (var key in schema) {
        this._headers[schema[key].index] = schema[key].name;
      }
    }
  }

  _createClass(RowTableBatch, [{
    key: "addRow",
    value: function addRow(row) {
      if (!this.rows) {
        this.rows = new Array(this.batchSize);
        this.length = 0;
      }

      this.rows[this.length] = convertRowToObject(row, this._headers);
      this.length++;
    }
  }, {
    key: "chunkComplete",
    value: function chunkComplete() {
      this.isChunkComplete = true;
    }
  }, {
    key: "isFull",
    value: function isFull() {
      if (this.batchSize === 'auto') {
        return this.isChunkComplete && this.length > 0;
      }

      return this.rows && this.length >= this.batchSize;
    }
  }, {
    key: "getNormalizedBatch",
    value: function getNormalizedBatch() {
      if (this.rows) {
        var rows = this.rows.slice(0, this.length);
        this.rows = null;
        this.isChunkComplete = false;
        return {
          data: rows,
          schema: this.schema,
          length: rows.length
        };
      }

      return null;
    }
  }]);

  return RowTableBatch;
}();

export { RowTableBatch as default };

function convertRowToObject(row, headers) {
  if (!row) {
    throw new Error('null row');
  }

  if (!Array.isArray(row)) {
    return row;
  }

  if (!headers) {
    return row;
  }

  var result = {};

  for (var i = 0; i < headers.length; i++) {
    result[headers[i]] = row[i];
  }

  return result;
}
//# sourceMappingURL=row-table-batch.js.map