import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper";

var ArrayQueue = function (_Array) {
  _inherits(ArrayQueue, _Array);

  function ArrayQueue() {
    _classCallCheck(this, ArrayQueue);

    return _possibleConstructorReturn(this, _getPrototypeOf(ArrayQueue).apply(this, arguments));
  }

  _createClass(ArrayQueue, [{
    key: "enqueue",
    value: function enqueue(value) {
      return this.push(value);
    }
  }, {
    key: "dequeue",
    value: function dequeue() {
      return this.shift();
    }
  }]);

  return ArrayQueue;
}(_wrapNativeSuper(Array));

export function takeAsync(_x) {
  return _takeAsync.apply(this, arguments);
}

function _takeAsync() {
  _takeAsync = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(asyncIterable) {
    var count,
        result,
        iterator,
        _ref,
        value,
        done,
        _args = arguments;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            count = _args.length > 1 && _args[1] !== undefined ? _args[1] : Infinity;
            result = [];
            iterator = asyncIterable[Symbol.asyncIterator]();

          case 3:
            if (!(result.length < count)) {
              _context.next = 14;
              break;
            }

            _context.next = 6;
            return iterator.next();

          case 6:
            _ref = _context.sent;
            value = _ref.value;
            done = _ref.done;

            if (!done) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("break", 14);

          case 11:
            result.push(value);
            _context.next = 3;
            break;

          case 14:
            return _context.abrupt("return", result);

          case 15:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _takeAsync.apply(this, arguments);
}

var AsyncQueue = function () {
  function AsyncQueue() {
    _classCallCheck(this, AsyncQueue);

    this._values = new ArrayQueue();
    this._settlers = new ArrayQueue();
    this._closed = false;
  }

  _createClass(AsyncQueue, [{
    key: "close",
    value: function close() {
      while (this._settlers.length > 0) {
        this._settlers.dequeue().resolve({
          done: true
        });
      }

      this._closed = true;
    }
  }, {
    key: Symbol.asyncIterator,
    value: function value() {
      return this;
    }
  }, {
    key: "enqueue",
    value: function enqueue(value) {
      if (this._closed) {
        throw new Error('Closed');
      }

      if (this._settlers.length > 0) {
        if (this._values.length > 0) {
          throw new Error('Illegal internal state');
        }

        var settler = this._settlers.dequeue();

        if (value instanceof Error) {
          settler.reject(value);
        } else {
          settler.resolve({
            value: value
          });
        }
      } else {
        this._values.enqueue(value);
      }
    }
  }, {
    key: "next",
    value: function next() {
      var _this = this;

      if (this._values.length > 0) {
        var value = this._values.dequeue();

        if (value instanceof Error) {
          return Promise.reject(value);
        }

        return Promise.resolve({
          value: value
        });
      }

      if (this._closed) {
        if (this._settlers.length > 0) {
          throw new Error('Illegal internal state');
        }

        return Promise.resolve({
          done: true
        });
      }

      return new Promise(function (resolve, reject) {
        _this._settlers.enqueue({
          resolve: resolve,
          reject: reject
        });
      });
    }
  }]);

  return AsyncQueue;
}();

export { AsyncQueue as default };
//# sourceMappingURL=async-queue.js.map