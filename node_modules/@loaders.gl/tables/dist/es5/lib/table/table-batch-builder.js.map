{"version":3,"sources":["../../../../src/lib/table/table-batch-builder.js"],"names":["DEFAULT_BATCH_SIZE","TableBatchBuilder","TableBatchType","schema","batchSize","batch","batchCount","row","addRow","chunkComplete","isFull","Boolean","normalizedBatch","getNormalizedBatch","count"],"mappings":";;;;;;;;;;;;;AAAA,IAAMA,kBAAkB,GAAG,GAA3B;;IAEqBC,iB;AACnB,6BAAYC,cAAZ,EAA4BC,MAA5B,EAAoE;AAAA,QAAhCC,SAAgC,uEAApBJ,kBAAoB;AAAA;AAClE,SAAKE,cAAL,GAAsBA,cAAtB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACD;;;;2BAEMC,G,EAAK;AACV,UAAI,CAAC,KAAKF,KAAV,EAAiB;AAAA,YACRH,cADQ,GACU,IADV,CACRA,cADQ;AAEf,aAAKG,KAAL,GAAa,IAAIH,cAAJ,CAAmB,KAAKC,MAAxB,EAAgC,KAAKC,SAArC,CAAb;AACD;;AAED,WAAKC,KAAL,CAAWG,MAAX,CAAkBD,GAAlB;AACD;;;oCAEe;AACd,UAAI,KAAKF,KAAT,EAAgB;AACd,aAAKA,KAAL,CAAWI,aAAX;AACD;AACF;;;6BAEQ;AACP,aAAO,KAAKJ,KAAL,IAAc,KAAKA,KAAL,CAAWK,MAAX,EAArB;AACD;;;+BAEU;AACT,aAAOC,OAAO,CAAC,KAAKN,KAAN,CAAd;AACD;;;yCAEoB;AACnB,UAAI,KAAKA,KAAT,EAAgB;AACd,YAAMO,eAAe,GAAG,KAAKP,KAAL,CAAWQ,kBAAX,EAAxB;AACA,aAAKR,KAAL,GAAa,IAAb;AACAO,QAAAA,eAAe,CAACE,KAAhB,GAAwB,KAAKR,UAA7B;AACA,aAAKA,UAAL;AACA,eAAOM,eAAP;AACD;;AACD,aAAO,IAAP;AACD","sourcesContent":["const DEFAULT_BATCH_SIZE = 100;\n\nexport default class TableBatchBuilder {\n  constructor(TableBatchType, schema, batchSize = DEFAULT_BATCH_SIZE) {\n    this.TableBatchType = TableBatchType;\n    this.schema = schema;\n    this.batchSize = batchSize;\n    this.batch = null;\n    this.batchCount = 0;\n  }\n\n  addRow(row) {\n    if (!this.batch) {\n      const {TableBatchType} = this;\n      this.batch = new TableBatchType(this.schema, this.batchSize);\n    }\n\n    this.batch.addRow(row);\n  }\n\n  chunkComplete() {\n    if (this.batch) {\n      this.batch.chunkComplete();\n    }\n  }\n\n  isFull() {\n    return this.batch && this.batch.isFull();\n  }\n\n  hasBatch() {\n    return Boolean(this.batch);\n  }\n\n  getNormalizedBatch() {\n    if (this.batch) {\n      const normalizedBatch = this.batch.getNormalizedBatch();\n      this.batch = null;\n      normalizedBatch.count = this.batchCount;\n      this.batchCount++;\n      return normalizedBatch;\n    }\n    return null;\n  }\n\n  // complete() {\n  //   let batch = null;\n  //   if (this.batch) {\n  //     batch = this.batch;\n  //     batch.complete();\n  //     this.batch = null;\n  //   }\n  //   return batch;\n  // }\n}\n"],"file":"table-batch-builder.js"}