"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZipLoader = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _jszip = _interopRequireDefault(require("jszip"));

var VERSION = typeof "2.1.6" !== 'undefined' ? "2.1.6" : 'latest';
var ZipLoader = {
  id: 'zip',
  name: 'Zip Archive',
  version: VERSION,
  extensions: ['zip'],
  mimeType: 'application/zip',
  category: 'archive',
  test: 'PK',
  parse: parseZipAsync
};
exports.ZipLoader = ZipLoader;

function parseZipAsync(_x, _x2) {
  return _parseZipAsync.apply(this, arguments);
}

function _parseZipAsync() {
  _parseZipAsync = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(data, options) {
    var promises, fileMap, jsZip, zip;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            promises = [];
            fileMap = {};
            _context.prev = 2;
            jsZip = new _jszip["default"]();
            _context.next = 6;
            return jsZip.loadAsync(data, options);

          case 6:
            zip = _context.sent;
            zip.forEach(function (relativePath, zipEntry) {
              var subFilename = zipEntry.name;
              var promise = loadZipEntry(jsZip, subFilename, options).then(function (arrayBufferOrError) {
                fileMap[relativePath] = arrayBufferOrError;
              });
              promises.push(promise);
            });
            _context.next = 10;
            return Promise.all(promises);

          case 10:
            return _context.abrupt("return", fileMap);

          case 13:
            _context.prev = 13;
            _context.t0 = _context["catch"](2);
            options.log.error("Unable to read zip archive: ".concat(_context.t0));
            throw _context.t0;

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[2, 13]]);
  }));
  return _parseZipAsync.apply(this, arguments);
}

function loadZipEntry(_x3, _x4, _x5) {
  return _loadZipEntry.apply(this, arguments);
}

function _loadZipEntry() {
  _loadZipEntry = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(jsZip, subFilename, options) {
    var arrayBuffer;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            _context2.next = 3;
            return jsZip.file(subFilename).async(options.dataType || 'arraybuffer');

          case 3:
            arrayBuffer = _context2.sent;
            return _context2.abrupt("return", arrayBuffer);

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2["catch"](0);
            options.log.error("Unable to read ".concat(subFilename, " from zip archive: ").concat(_context2.t0));
            return _context2.abrupt("return", _context2.t0);

          case 11:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 7]]);
  }));
  return _loadZipEntry.apply(this, arguments);
}
//# sourceMappingURL=zip-loader.js.map