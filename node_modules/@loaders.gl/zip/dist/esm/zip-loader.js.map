{"version":3,"sources":["../../src/zip-loader.js"],"names":["JSZip","VERSION","ZipLoader","id","name","version","extensions","mimeType","category","test","parse","parseZipAsync","data","options","promises","fileMap","jsZip","loadAsync","zip","forEach","relativePath","zipEntry","subFilename","promise","loadZipEntry","then","arrayBufferOrError","push","Promise","all","log","error","file","async","dataType","arrayBuffer"],"mappings":";;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,IAAMC,OAAO,GAAG,mBAAuB,WAAvB,aAAmD,QAAnE;AAEA,OAAO,IAAMC,SAAS,GAAG;AACvBC,EAAAA,EAAE,EAAE,KADmB;AAEvBC,EAAAA,IAAI,EAAE,aAFiB;AAGvBC,EAAAA,OAAO,EAAEJ,OAHc;AAIvBK,EAAAA,UAAU,EAAE,CAAC,KAAD,CAJW;AAKvBC,EAAAA,QAAQ,EAAE,iBALa;AAMvBC,EAAAA,QAAQ,EAAE,SANa;AAOvBC,EAAAA,IAAI,EAAE,IAPiB;AAQvBC,EAAAA,KAAK,EAAEC;AARgB,CAAlB;;SAYQA,a;;;;;8DAAf,iBAA6BC,IAA7B,EAAmCC,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,YAAAA,QADR,GACmB,EADnB;AAEQC,YAAAA,OAFR,GAEkB,EAFlB;AAAA;AAKUC,YAAAA,KALV,GAKkB,IAAIhB,KAAJ,EALlB;AAAA;AAAA,mBAOsBgB,KAAK,CAACC,SAAN,CAAgBL,IAAhB,EAAsBC,OAAtB,CAPtB;;AAAA;AAOUK,YAAAA,GAPV;AAUIA,YAAAA,GAAG,CAACC,OAAJ,CAAY,UAACC,YAAD,EAAeC,QAAf,EAA4B;AACtC,kBAAMC,WAAW,GAAGD,QAAQ,CAACjB,IAA7B;AAEA,kBAAMmB,OAAO,GAAGC,YAAY,CAACR,KAAD,EAAQM,WAAR,EAAqBT,OAArB,CAAZ,CAA0CY,IAA1C,CAA+C,UAAAC,kBAAkB,EAAI;AACnFX,gBAAAA,OAAO,CAACK,YAAD,CAAP,GAAwBM,kBAAxB;AACD,eAFe,CAAhB;AAKAZ,cAAAA,QAAQ,CAACa,IAAT,CAAcJ,OAAd;AACD,aATD;AAVJ;AAAA,mBAqBUK,OAAO,CAACC,GAAR,CAAYf,QAAZ,CArBV;;AAAA;AAAA,6CAsBWC,OAtBX;;AAAA;AAAA;AAAA;AAwBIF,YAAAA,OAAO,CAACiB,GAAR,CAAYC,KAAZ;AAxBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SA6BeP,Y;;;;;6DAAf,kBAA4BR,KAA5B,EAAmCM,WAAnC,EAAgDT,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAI8BG,KAAK,CAACgB,IAAN,CAAWV,WAAX,EAAwBW,KAAxB,CAA8BpB,OAAO,CAACqB,QAAR,IAAoB,aAAlD,CAJ9B;;AAAA;AAIUC,YAAAA,WAJV;AAAA,8CAKWA,WALX;;AAAA;AAAA;AAAA;AAOItB,YAAAA,OAAO,CAACiB,GAAR,CAAYC,KAAZ,0BAAoCT,WAApC;AAPJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["// __VERSION__ is injected by babel-plugin-version-inline\n/* global __VERSION__ */\nimport JSZip from 'jszip';\n\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport const ZipLoader = {\n  id: 'zip',\n  name: 'Zip Archive',\n  version: VERSION,\n  extensions: ['zip'],\n  mimeType: 'application/zip',\n  category: 'archive',\n  test: 'PK',\n  parse: parseZipAsync\n};\n\n// TODO - Could return a map of promises, perhaps as an option...\nasync function parseZipAsync(data, options) {\n  const promises = [];\n  const fileMap = {};\n\n  try {\n    const jsZip = new JSZip();\n\n    const zip = await jsZip.loadAsync(data, options);\n\n    // start to load each file in this zip\n    zip.forEach((relativePath, zipEntry) => {\n      const subFilename = zipEntry.name;\n\n      const promise = loadZipEntry(jsZip, subFilename, options).then(arrayBufferOrError => {\n        fileMap[relativePath] = arrayBufferOrError;\n      });\n\n      // Ensure Promise.all doesn't ignore rejected promises.\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return fileMap;\n  } catch (error) {\n    options.log.error(`Unable to read zip archive: ${error}`);\n    throw error;\n  }\n}\n\nasync function loadZipEntry(jsZip, subFilename, options) {\n  // jszip supports both arraybuffer and text, the main loaders.gl types\n  // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n  try {\n    const arrayBuffer = await jsZip.file(subFilename).async(options.dataType || 'arraybuffer');\n    return arrayBuffer;\n  } catch (error) {\n    options.log.error(`Unable to read ${subFilename} from zip archive: ${error}`);\n    // Store error in place of data in map\n    return error;\n  }\n}\n"],"file":"zip-loader.js"}