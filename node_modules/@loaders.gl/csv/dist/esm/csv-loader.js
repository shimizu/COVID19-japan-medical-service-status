import _typeof from "@babel/runtime/helpers/esm/typeof";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import { AsyncQueue, TableBatchBuilder, RowTableBatch } from '@loaders.gl/tables';
import Papa from './libs/papaparse';
import AsyncIteratorStreamer from './lib/async-iterator-streamer';
var VERSION = typeof "2.1.6" !== 'undefined' ? "2.1.6" : 'latest';
var CSVLoader = {
  id: 'csv',
  name: 'CSV',
  version: VERSION,
  extensions: ['csv'],
  mimeType: 'text/csv',
  category: 'table',
  parse: function () {
    var _parse = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt("return", parseCSVSync(new TextDecoder().decode(arrayBuffer), options));

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function parse(_x, _x2) {
      return _parse.apply(this, arguments);
    }

    return parse;
  }(),
  parseTextSync: parseCSVSync,
  parseInBatches: parseCSVInBatches,
  testText: null,
  options: {
    csv: {
      TableBatch: RowTableBatch,
      batchSize: 10
    }
  }
};
export default CSVLoader;

function parseCSVSync(csvText, options) {
  options = _objectSpread({}, CSVLoader.options, {}, options);
  options.csv = _objectSpread({}, CSVLoader.options.csv, {}, options.csv);

  var config = _objectSpread({
    header: hasHeader(csvText, options),
    dynamicTyping: true
  }, options.csv, {
    download: false,
    error: function error(e) {
      throw new Error(e);
    }
  });

  var result = Papa.parse(csvText, config);
  return result.data;
}

function parseCSVInBatches(asyncIterator, options) {
  options = _objectSpread({}, CSVLoader.options, {}, options);
  options.csv = _objectSpread({}, CSVLoader.options.csv, {}, options.csv);
  var batchSize = options.csv.batchSize;
  var TableBatchType = options.csv.TableBatch;
  var asyncQueue = new AsyncQueue();
  var isFirstRow = true;
  var headerRow = null;
  var tableBatchBuilder = null;
  var schema = null;
  var config = {
    download: false,
    dynamicTyping: true,
    header: false,
    step: function step(results, parser) {
      var row = results.data;

      if (isFirstRow && !headerRow) {
        var header = options.header === undefined ? isHeaderRow(row) : options.header;

        if (header) {
          headerRow = row;
          return;
        }
      }

      if (isFirstRow) {
        isFirstRow = false;
        schema = deduceSchema(row, headerRow);
      }

      tableBatchBuilder = tableBatchBuilder || new TableBatchBuilder(TableBatchType, schema, batchSize);
      tableBatchBuilder.addRow(row);

      if (tableBatchBuilder.isFull()) {
        asyncQueue.enqueue(tableBatchBuilder.getNormalizedBatch());
      }
    },
    complete: function complete(results, file) {
      var batch = tableBatchBuilder.getNormalizedBatch();

      if (batch) {
        asyncQueue.enqueue(batch);
      }

      asyncQueue.close();
    }
  };
  Papa.parse(asyncIterator, config, AsyncIteratorStreamer);
  return asyncQueue;
}

function isHeaderRow(row) {
  return row.every(function (value) {
    return typeof value === 'string';
  });
}

function hasHeader(csvText, options) {
  if ('header' in options) {
    return options.header;
  }

  var header = false;
  Papa.parse(csvText, {
    download: false,
    dynamicTyping: true,
    step: function step(results, parser) {
      var row = results.data;
      header = isHeaderRow(row);
      parser.abort();
    }
  });
  return header;
}

function deduceSchema(row, headerRow) {
  var schema = headerRow ? {} : [];

  for (var i = 0; i < row.length; i++) {
    var columnName = headerRow && headerRow[i] || i;
    var value = row[i];

    switch (_typeof(value)) {
      case 'number':
      case 'boolean':
        schema[columnName] = {
          name: String(columnName),
          index: i,
          type: Float32Array
        };
        break;

      case 'string':
      default:
        schema[columnName] = {
          name: String(columnName),
          index: i,
          type: Array
        };
    }
  }

  return schema;
}
//# sourceMappingURL=csv-loader.js.map